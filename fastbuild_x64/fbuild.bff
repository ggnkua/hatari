; You need to define these 3 things depending on your install.
; They cannot be derived easily sadly
.GCC_BIN_DIR="C:\msys64\mingw64\bin"
.SRC_DIR="D:\a\hatari\hatari"
.MINGW_ROOT="C:\msys64"

; Derived variables
.GCC                  = "$GCC_BIN_DIR$\gcc.exe"
.GPP                  = "$GCC_BIN_DIR$\g++.exe"
.AR                   = "$GCC_BIN_DIR$\ar.exe"
.RANLIB               = "$GCC_BIN_DIR$\ranlib.exe"
.WINDRES              = "$GCC_BIN_DIR$\windres.exe"
.SDL2_INCLUDES_FOLDER = "$MINGW_ROOT$/mingw64/include/SDL2"

.INCLUDES_COMMON = "-I$MINGW_ROOT$/usr/include"
                  +" -I$SRC_DIR$/src/includes"
                  +" -I$SRC_DIR$/src/debug"
                  +" -I$SRC_DIR$/src/falcon"
                  +" -I$SRC_DIR$/src/cpu"
                  +" -I$SRC_DIR$/src"
                  +" -I."
                  +" -I$SDL2_INCLUDES_FOLDER$"
.INCLUDES_UAECPU = .INCLUDES_COMMON+" -I$SRC_DIR$/src/cpu/softfloat -Icpu"
.INCLUDES_FLOPPY = .INCLUDES_COMMON
.INCLUDES_DEBUG  = .INCLUDES_COMMON
.INCLUDES_FALCON = .INCLUDES_COMMON
.INCLUDES_GUISDL = .INCLUDES_COMMON
.INCLUDES_HATARI = "-I$MINGW_ROOT$/mingw64/x86_64-w64-mingw64/include $INCLUDES_COMMON$"

.CFLAGS_COMMON  = '-DCONFDIR=\".\" '
                 +' -DWITH_SDL2'
                 +' -D_REENTRANT'
                 +' -std=gnu99'
                 +' -Wcast-qual'
                 +' -Wbad-function-cast'
                 +' -Wpointer-arith'
                 +' -Wmissing-prototypes'
                 +' -Wstrict-prototypes'
                 +' -Wall'
                 +' -Wwrite-strings'
                 +' -Wsign-compare'
                 +' -Wformat-security'
                 +' -D_LARGEFILE_SOURCE'
                 +' -D_FILE_OFFSET_BITS=64'
                 +' -O3'
                 +' -DNDEBUG'
                 +' -DSTDC_HEADERS'
.CFLAGS_UAE_CPU1= .CFLAGS_COMMON+" -Wno-sign-compare -Wno-shadow -Wno-unused-variable -Wno-unused-but-set-variable"
.CFLAGS_UAE_CPU2= .CFLAGS_COMMON+" -Wno-unused-variable -Wno-unused-function -Wno-unused-label -Wno-missing-braces -Wno-sign-compare -Wno-unused-but-set-variable -Wno-maybe-uninitialized"
.CFLAGS_UAE_CPU3= .CFLAGS_COMMON
.CFLAGS_FLOPPY  = .CFLAGS_COMMON
.CFLAGS_DEBUG   = .CFLAGS_COMMON
.CFLAGS_FALCON  = .CFLAGS_COMMON
.CFLAGS_GUISDL  = .CFLAGS_COMMON+" -Wno-write-strings"
.CFLAGS_HATARI  = .CFLAGS_COMMON+" -Dmain=SDL_main"

Compiler( 'gcc' )              ; Alias
{
  .Executable                   =.GCC  ; Primary compiler executable
  .CompilerFamily               ="gcc" ; (optional) Explicitly specify compiler type (default: auto)
}
Compiler( 'gpp' )              ; Alias
{
  .Executable                   =.GPP  ; Primary compiler executable
  .CompilerFamily               ="gcc" ; (optional) Explicitly specify compiler type (default: auto)
}

;  _           _             _ 
; | |         | |           (_)
; | |__   __ _| |_ __ _ _ __ _ 
; | '_ \ / _` | __/ _` | '__| |
; | | | | (_| | || (_| | |  | |
; |_| |_|\__,_|\__\__,_|_|  |_|

; build68k
ObjectList( "build68k_obj" )         ; Alias
{
  .Compiler                 ="gcc"                                                           ; Compiler to use
  .CompilerOptions          ="-I$SRC_DIR$/src/cpu -c %1 -o %2"                               ; Options for compiler
  .CompilerOutputPath       ="cpu/build68k"                                                  ; Path to store intermediate objects
  .CompilerInputFiles       ={"$SRC_DIR$/src/cpu/build68k.c","$SRC_DIR$/src/cpu/writelog.c"} ; (optional) Explicit array of files to build
}
Executable( "build68k_exe" )        ; (optional) Alias
{
  .Linker                  =.GCC               ; Linker executable to use
  .LinkerOutput            ="cpu/build68k.exe" ; Output from linker
  .LinkerOptions           ="%1 -o %2"         ; Options to pass to linker
  .Libraries               ="build68k_obj"     ; Libraries to link into executable
}

; cpudefs.c
Exec( "run_build68k" )  ; (optional) Alias
{
  .ExecExecutable         ="c:\windows\system32\cmd.exe"                                       ; Executable to run
  .ExecOutput             ="cpu/cpudefs.c"                                                     ; Output file generated by executable
  .ExecArguments          ='/c "cpu\build68k.exe < $SRC_DIR$\src\cpu\table68k >cpu\cpudefs.c"' ; (optional) Arguments to pass to executable
  .ExecWorkingDir         ="."                                                                 ; (optional) Working dir to set for executable
  .PreBuildDependencies   ="build68k_exe"                                                      ; (optional) Force targets to be built before this Exec (Rarely needed,
                                                                                               ; but useful when Exec relies on externally generated files).
}

; gencpu
ObjectList( "gencpu_obj" )                                                                                ; Alias
{
.Compiler                 ="gcc"                                                                          ; Compiler to use
.CompilerOptions          ="-I$SRC_DIR$/src/cpu -c %1 -o %2"                                              ; Options for compiler
.CompilerOutputPath       ="cpu/gencpu"                                                                   ; Path to store intermediate objects
.CompilerInputFiles       ={"cpu/cpudefs.c", "$SRC_DIR$/src/cpu/gencpu.c", "$SRC_DIR$/src/cpu/readcpu.c"} ; (optional) Explicit array of files to build
}
Executable( "gencpu_exe" )                 ; (optional) Alias
{
.Linker                  =.GCC             ; Linker executable to use
.LinkerOutput            ="cpu/gencpu.exe" ; Output from linker
.LinkerOptions           ="%1 -o %2"       ; Options to pass to linker
.Libraries               ="gencpu_obj"     ; Libraries to link into executable
}

; cpustbl.c, cpuemu_0.c, cpuemu_11.c, cpuemu_13.c, cpuemu_20.c, cpuemu_21.c, cpuemu_22.c, cpuemu_23.c, cpuemu_24.c, cpuemu_31.c, cpuemu_32.c, cpuemu_33.c, cpuemu_34.c, cpuemu_35.c, cpuemu_40.c, cpuemu_50.c
Exec( "run_gencpu" )  ; (optional) Alias
{
  .ExecExecutable         ="cpu/gencpu.exe" ; Executable to run
  .ExecOutput             ="cpu/cpustbl.c"  ; Output file generated by executable
  .ExecWorkingDir         ="cpu"            ; (optional) Working dir to set for executable
  .PreBuildDependencies   ="gencpu_exe"     ; (optional) Force targets to be built before this Exec (Rarely needed,
                                            ; but useful when Exec relies on externally generated files).
}

; UaeCpu
.UAECPU_SRC_1=
{
    "cpu/cpustbl.c"
    "cpu/cpuemu_0.c"
    "cpu/cpuemu_11.c"
    "cpu/cpuemu_13.c"
    "cpu/cpuemu_20.c"
    "cpu/cpuemu_21.c"
    "cpu/cpuemu_22.c"
    "cpu/cpuemu_23.c"
    "cpu/cpuemu_24.c"
    "cpu/cpuemu_31.c"
    "cpu/cpuemu_32.c"
    "cpu/cpuemu_33.c"
    "cpu/cpuemu_34.c"
    "cpu/cpuemu_35.c"
    "cpu/cpuemu_40.c"
    "cpu/cpuemu_50.c"
}
.UAECPU_SRC_2=
{
    "cpu/cpudefs.c"
    "$SRC_DIR$/src/cpu/cpummu.c"
    "$SRC_DIR$/src/cpu/cpummu030.c"
    "$SRC_DIR$/src/cpu/debug.c"
    "$SRC_DIR$/src/cpu/disasm.c"
    "$SRC_DIR$/src/cpu/newcpu_common.c"
    "$SRC_DIR$/src/cpu/newcpu.c"
    "$SRC_DIR$/src/cpu/readcpu.c"
    "$SRC_DIR$/src/cpu/writelog.c"
    "$SRC_DIR$/src/cpu/fpp.c"
    "$SRC_DIR$/src/cpu/fpp_native.c"
    "$SRC_DIR$/src/cpu/fpp_softfloat.c"
    "$SRC_DIR$/src/cpu/softfloat/softfloat.c"
    "$SRC_DIR$/src/cpu/softfloat/softfloat_decimal.c"
    "$SRC_DIR$/src/cpu/softfloat/softfloat_fpsp.c"
    "$SRC_DIR$/src/cpu/machdep/m68k.c"
}
.UAECPU_SRC_3=
{
    "$SRC_DIR$/src/cpu/custom.c"
    "$SRC_DIR$/src/cpu/events.c"
    "$SRC_DIR$/src/cpu/memory.c"
    "$SRC_DIR$/src/cpu/hatari-glue.c"
}
ObjectList( "uaecpu_obj_2" )         ; Alias
{
  .Compiler                 ="gcc"                                             ; Compiler to use
  .CompilerOptions          ="$INCLUDES_UAECPU$ $CFLAGS_UAE_CPU2$ -c %1 -o %2" ; Options for compiler
  .CompilerOutputPath       ="uaecpu"                                          ; Path to store intermediate objects
  .CompilerInputFiles       =.UAECPU_SRC_2                                     ; (optional) Explicit array of files to build
  .PreBuildDependencies     ="run_gencpu"                                      ; (optional) Force targets to be built before this Objectlist (Rarely needed,
                                                                               ; but useful when Objectlist relies on externally generated files).
}
ObjectList( "uaecpu_obj_3" )         ; Alias
{
  .Compiler                 ="gcc"                                             ; Compiler to use
  .CompilerOptions          ="$INCLUDES_UAECPU$ $CFLAGS_UAE_CPU3$ -c %1 -o %2" ; Options for compiler
  .CompilerOutputPath       ="uaecpu"                                          ; Path to store intermediate objects
  .CompilerInputFiles       =.UAECPU_SRC_3                                     ; (optional) Explicit array of files to build
  .PreBuildDependencies     ="run_gencpu"                                      ; (optional) Force targets to be built before this Objectlist (Rarely needed,
                                                                               ; but useful when Objectlist relies on externally generated files).
}

Library( "UAECPU_lib" )            ; (optional) Alias
{
  .Compiler                 ="gcc"                                             ; Compiler to use
  .CompilerOptions          ="$INCLUDES_UAECPU$ $CFLAGS_UAE_CPU1$ -c %1 -o %2" ; Options for compiler
  .CompilerOutputPath       ="uaecpu"                                          ; Path to store intermediate objects
  .CompilerInputFiles       =.UAECPU_SRC_1                                     ; (optional) Explicit array of files to build
  .Librarian                =.AR                                               ; Librarian to collect intermediate objects
  .LibrarianOptions         ="qcs %2 %1"                                       ; Options for librarian
  .LibrarianType            ="ar"                                              ; (optional) Specify the librarian type. Valid options include:
                                                                               ; auto, msvc, ar, ar-orbis, greenhills-ax
                                                                               ; Default is 'auto' (use the librarian executable name to detect)
  .LibrarianOutput          ="uaecpu/libUaeCpu.a"                              ; Output path for lib file
  .LibrarianAdditionalInputs={"uaecpu_obj_2","uaecpu_obj_3"}                   ; (optional) Additional inputs to merge into library
  .PreBuildDependencies     ="run_gencpu"                                      ; (optional) Force targets to be built before this Library (Rarely needed,
                                                                               ; but useful when Library relies on externally generated files).
}

; Floppy
.FLOPPY_SRC=
{
    "$SRC_DIR$/src/createBlankImage.c"
    "$SRC_DIR$/src/dim.c"
    "$SRC_DIR$/src/msa.c"
    "$SRC_DIR$/src/st.c"
    "$SRC_DIR$/src/zip.c"
}
Library( "floppy_lib" )            ; (optional) Alias
{
  .Compiler                 ="gcc"                                           ; Compiler to use
  .CompilerOptions          ="$INCLUDES_FLOPPY$ $CFLAGS_FLOPPY$ -c %1 -o %2" ; Options for compiler
  .CompilerOutputPath       ="floppy"                                        ; Path to store intermediate objects
  .CompilerInputFiles       =.FLOPPY_SRC                                     ; (optional) Explicit array of files to build
  .Librarian                =.AR                                             ; Librarian to collect intermediate objects
  .LibrarianOptions         ="qcs %2 %1"                                     ; Options for librarian
  .LibrarianType            ="ar"                                            ; (optional) Specify the librarian type. Valid options include:
                                                                             ; auto, msvc, ar, ar-orbis, greenhills-ax
                                                                             ; Default is 'auto' (use the librarian executable name to detect)
  .LibrarianOutput          ="floppy/libFloppy.a"                            ; Output path for lib file
}

; Debug
.DEBUG_SRC=
{
    "$SRC_DIR$/src/debug/log.c"
    "$SRC_DIR$/src/debug/debugui.c"
    "$SRC_DIR$/src/debug/breakcond.c"
    "$SRC_DIR$/src/debug/debugcpu.c"
    "$SRC_DIR$/src/debug/debugInfo.c"
    "$SRC_DIR$/src/debug/debugdsp.c"
    "$SRC_DIR$/src/debug/evaluate.c"
    "$SRC_DIR$/src/debug/history.c"
    "$SRC_DIR$/src/debug/symbols.c"
    "$SRC_DIR$/src/debug/vars.c"
    "$SRC_DIR$/src/debug/profile.c"
    "$SRC_DIR$/src/debug/profilecpu.c"
    "$SRC_DIR$/src/debug/profiledsp.c"
    "$SRC_DIR$/src/debug/natfeats.c"
    "$SRC_DIR$/src/debug/console.c"
    "$SRC_DIR$/src/debug/68kDisass.c"
    "$SRC_DIR$/src/debug/RemoteDebug.c"
}
Library( "debug_lib" )            ; (optional) Alias
{
  .Compiler                 ="gcc"                                         ; Compiler to use
  .CompilerOptions          ="$INCLUDES_DEBUG$ $CFLAGS_DEBUG$ -c %1 -o %2" ; Options for compiler
  .CompilerOutputPath       ="debug"                                       ; Path to store intermediate objects
  .CompilerInputFiles       =.DEBUG_SRC                                    ; (optional) Explicit array of files to build
  .Librarian                =.AR                                           ; Librarian to collect intermediate objects
  .LibrarianOptions         ="qcs %2 %1"                                   ; Options for librarian
  .LibrarianType            ="ar"                                          ; (optional) Specify the librarian type. Valid options include:
                                                                           ; auto, msvc, ar, ar-orbis, greenhills-ax
                                                                           ; Default is 'auto' (use the librarian executable name to detect)
  .LibrarianOutput          ="debug/libDebug.a"                            ; Output path for lib file
}

; Falcon
.FALCON_SRC=
{
    "$SRC_DIR$/src/falcon/crossbar.c"
    "$SRC_DIR$/src/falcon/microphone.c"
    "$SRC_DIR$/src/falcon/nvram.c"
    "$SRC_DIR$/src/falcon/videl.c"
    "$SRC_DIR$/src/falcon/dsp.c"
    "$SRC_DIR$/src/falcon/dsp_core.c"
    "$SRC_DIR$/src/falcon/dsp_cpu.c"
    "$SRC_DIR$/src/falcon/dsp_disasm.c"
}
Library( "falcon_lib" )            ; (optional) Alias
{
  .Compiler                 ="gcc"                                           ; Compiler to use
  .CompilerOptions          ="$INCLUDES_FALCON$ $CFLAGS_FALCON$ -c %1 -o %2" ; Options for compiler
  .CompilerOutputPath       ="falcon"                                        ; Path to store intermediate objects
  .CompilerInputFiles       =.FALCON_SRC                                     ; (optional) Explicit array of files to build
  .Librarian                =.AR                                             ; Librarian to collect intermediate objects
  .LibrarianOptions         ="qcs %2 %1"                                     ; Options for librarian
  .LibrarianType            ="ar"                                            ; (optional) Specify the librarian type. Valid options include:
                                                                             ; auto, msvc, ar, ar-orbis, greenhills-ax
                                                                             ; Default is 'auto' (use the librarian executable name to detect)
  .LibrarianOutput          ="falcon/libFalcon.a"                            ; Output path for lib file
}

; GuiSdl
.GUISDL_SRC=
{
    "$SRC_DIR$/src/gui-sdl/dlgAbout.c"
    "$SRC_DIR$/src/gui-sdl/dlgAlert.c"
    "$SRC_DIR$/src/gui-sdl/dlgCpu.c"
    "$SRC_DIR$/src/gui-sdl/dlgDevice.c"
    "$SRC_DIR$/src/gui-sdl/dlgFileSelect.c"
    "$SRC_DIR$/src/gui-sdl/dlgFloppy.c"
    "$SRC_DIR$/src/gui-sdl/dlgHalt.c"
    "$SRC_DIR$/src/gui-sdl/dlgHardDisk.c"
    "$SRC_DIR$/src/gui-sdl/dlgJoystick.c"
    "$SRC_DIR$/src/gui-sdl/dlgKeyboard.c"
    "$SRC_DIR$/src/gui-sdl/dlgMain.c"
    "$SRC_DIR$/src/gui-sdl/dlgMemory.c"
    "$SRC_DIR$/src/gui-sdl/dlgNewDisk.c"
    "$SRC_DIR$/src/gui-sdl/dlgRom.c"
    "$SRC_DIR$/src/gui-sdl/dlgScreen.c"
    "$SRC_DIR$/src/gui-sdl/dlgSound.c"
    "$SRC_DIR$/src/gui-sdl/dlgSystem.c"
    "$SRC_DIR$/src/gui-sdl/sdlgui.c"
}
Library( "guisdl_lib" )            ; (optional) Alias
{
  .Compiler                 ="gcc"                                           ; Compiler to use
  .CompilerOptions          ="$INCLUDES_GUISDL$ $CFLAGS_GUISDL$ -c %1 -o %2" ; Options for compiler
  .CompilerOutputPath       ="guisdl"                                        ; Path to store intermediate objects
  .CompilerInputFiles       =.GUISDL_SRC                                     ; (optional) Explicit array of files to build
  .Librarian                =.AR                                             ; Librarian to collect intermediate objects
  .LibrarianOptions         ="qcs %2 %1"                                     ; Options for librarian
  .LibrarianType            ="ar"                                            ; (optional) Specify the librarian type. Valid options include:
                                                                             ; auto, msvc, ar, ar-orbis, greenhills-ax
                                                                             ; Default is 'auto' (use the librarian executable name to detect)
  .LibrarianOutput          ="guisdl/libGuiSdl.a"                            ; Output path for lib file
}


; hatari
.HATARI_SRC=
{
    "$SRC_DIR$/src/acia.c"
    "$SRC_DIR$/src/audio.c"
    "$SRC_DIR$/src/avi_record.c"
    "$SRC_DIR$/src/bios.c"
    "$SRC_DIR$/src/blitter.c"
    "$SRC_DIR$/src/cart.c"
    "$SRC_DIR$/src/cfgopts.c"
    "$SRC_DIR$/src/clocks_timings.c"
    "$SRC_DIR$/src/configuration.c"
    "$SRC_DIR$/src/options.c"
    "$SRC_DIR$/src/change.c"
    "$SRC_DIR$/src/control.c"
    "$SRC_DIR$/src/cycInt.c"
    "$SRC_DIR$/src/cycles.c"
    "$SRC_DIR$/src/dialog.c"
    "$SRC_DIR$/src/dmaSnd.c"
    "$SRC_DIR$/src/fdc.c"
    "$SRC_DIR$/src/file.c"
    "$SRC_DIR$/src/floppy.c"
    "$SRC_DIR$/src/floppy_ipf.c"
    "$SRC_DIR$/src/floppy_stx.c"
    "$SRC_DIR$/src/gemdos.c"
    "$SRC_DIR$/src/hd6301_cpu.c"
    "$SRC_DIR$/src/hdc.c"
    "$SRC_DIR$/src/ide.c"
    "$SRC_DIR$/src/ikbd.c"
    "$SRC_DIR$/src/ioMem.c"
    "$SRC_DIR$/src/ioMemTabST.c"
    "$SRC_DIR$/src/ioMemTabSTE.c"
    "$SRC_DIR$/src/ioMemTabTT.c"
    "$SRC_DIR$/src/ioMemTabFalcon.c"
    "$SRC_DIR$/src/joy.c"
    "$SRC_DIR$/src/keymap.c"
    "$SRC_DIR$/src/m68000.c"
    "$SRC_DIR$/src/main.c"
    "$SRC_DIR$/src/midi.c"
    "$SRC_DIR$/src/memorySnapShot.c"
    "$SRC_DIR$/src/mfp.c"
    "$SRC_DIR$/src/nf_scsidrv.c"
    "$SRC_DIR$/src/ncr5380.c"
    "$SRC_DIR$/src/paths.c"
    "$SRC_DIR$/src/psg.c"
    "$SRC_DIR$/src/printer.c"
    "$SRC_DIR$/src/resolution.c"
    "$SRC_DIR$/src/rs232.c"
    "$SRC_DIR$/src/reset.c"
    "$SRC_DIR$/src/rtc.c"
    "$SRC_DIR$/src/scandir.c"
    "$SRC_DIR$/src/scc.c"
    "$SRC_DIR$/src/stMemory.c"
    "$SRC_DIR$/src/screen.c"
    "$SRC_DIR$/src/screenConvert.c"
    "$SRC_DIR$/src/screenSnapShot.c"
    "$SRC_DIR$/src/shortcut.c"
    "$SRC_DIR$/src/sound.c"
    "$SRC_DIR$/src/spec512.c"
    "$SRC_DIR$/src/statusbar.c"
    "$SRC_DIR$/src/str.c"
    "$SRC_DIR$/src/tos.c"
    "$SRC_DIR$/src/utils.c"
    "$SRC_DIR$/src/vdi.c"
    "$SRC_DIR$/src/vme.c"
    "$SRC_DIR$/src/inffile.c"
    "$SRC_DIR$/src/video.c"
    "$SRC_DIR$/src/wavFormat.c"
    "$SRC_DIR$/src/xbios.c"
    "$SRC_DIR$/src/ymFormat.c"
    "$SRC_DIR$/src/lilo.c"
    "$SRC_DIR$/src/gui-win/opencon.c"
}
Library( "hatari_lib" )            ; (optional) Alias
{
  .Compiler                 ="gcc"                                           ; Compiler to use
  .CompilerOptions          ="$INCLUDES_HATARI$ $CFLAGS_HATARI$ -c %1 -o %2" ; Options for compiler
  .CompilerOutputPath       ="hatari"                                        ; Path to store intermediate objects
  .CompilerInputFiles       =.HATARI_SRC                                     ; (optional) Explicit array of files to build
  .Librarian                =.AR                                             ; Librarian to collect intermediate objects
  .LibrarianOptions         ="qcs %2 %1"                                     ; Options for librarian
  .LibrarianType            ="ar"                                            ; (optional) Specify the librarian type. Valid options include:
                                                                             ; auto, msvc, ar, ar-orbis, greenhills-ax
                                                                             ; Default is 'auto' (use the librarian executable name to detect)
  .LibrarianOutput          ="hatari/libHatari.a"                            ; Output path for lib file
}
Exec( "run_windres" )  ; (optional) Alias
{
  .ExecExecutable         =.WINDRES                                                                          ; Executable to run
  .ExecOutput             ="hatari/hatari-winicon.rc.res"                                                    ; Output file generated by executable
  .ExecArguments          ='-Ocoff -o Hatari/hatari-winicon.rc.res $SRC_DIR$/src/gui-win/hatari-winicon.rc"' ; (optional) Arguments to pass to executable
  .ExecWorkingDir         ="."                                                                               ; (optional) Working dir to set for executable
}

.LIBS_HATARI=" -lmingw32 $MINGW_ROOT$/mingw64/bin/SDL2.dll -lpthread $MINGW_ROOT$/mingw64/lib/libSDL2main.a -lws2_32 -lpthread -lws2_32 -lkernel32 -luser32 -lgdi32 -lwinspool -lshell32 -lole32 -loleaut32 -luuid -lcomdlg32 -ladvapi32 -lkernel32 -Xlinker -Map=output.map"
Executable( "hatari_exe" )        ; (optional) Alias
{
  .Linker                  =.GCC         ; Linker executable to use
  .LinkerOutput            ="hatari.exe" ; Output from linker
  .LinkerOptions           ="-std=gnu99"
                          +" -Wcast-qual"
                          +" -Wbad-function-cast"
                          +" -Wpointer-arith"
                          +" -Wmissing-prototypes"
                          +" -Wstrict-prototypes"
                          +" -Wall -Wwrite-strings"
                          +" -Wsign-compare"
                          +" -Wformat-security"
                          +" -D_LARGEFILE_SOURCE"
                          +" -D_FILE_OFFSET_BITS=64"
                          +" -O3"
                          +" -DNDEBUG"
                          +" -mwindows"
                          +" -Wl,--whole-archive hatari/libhatari.a"
                          +" -Wl,--no-whole-archive"
                          +" -Wl,--out-implib,libhatari.dll.a"
                          +" -Wl,--major-image-version,0,--minor-image-version,0"
                          +" %1"
                          +.LIBS_HATARI
                          +" hatari/hatari-winicon.rc.res"
                          +" -o %2"; Options to pass to linker
  .Libraries               ={"falcon_lib","UAECPU_lib","guisdl_lib","floppy_lib","debug_lib","hatari_lib"}; Libraries to link into executable
  
  .PreBuildDependencies    ={"hatari_lib","run_windres"} ; (optional) Force targets to be built before this Executable (Rarely needed,
}

;  _             _ _     
; | |           | | |    
; | |__  _ __ __| | |__  
; | '_ \| '__/ _` | '_ \ 
; | | | | | | (_| | |_) |
; |_| |_|_|  \__,_|_.__/ 

.RCC         ="C:\m\mingw64\bin\rcc.exe"
.MOC         ="C:\m\mingw64\bin\moc.exe"
.MOC_DEFINES ="-DUNICODE"
            +" -D_UNICODE"
            +" -DWIN32"
            +" -DMINGW_HAS_SECURE_API=1"
            +" -DQT_DEPRECATED_WARNINGS"
            +" -DQT_NO_DEBUG -DQT_WIDGETS_LIB"
            +" -DQT_GUI_LIB"
            +" -DQT_NETWORK_LIB"
            +" -DQT_CORE_LIB"
            +" -DQT_NEEDS_QMAIN"
.MOC_INCLUDES="--include hrdb/moc_predefs.h"
            +" -I$MINGW_ROOT$/mingw64/share/qt5/mkspecs/win32-g++"
            +" -I$SRC_DIR$/hatari_git/tools/hrdb"
            +" -I$MINGW_ROOT$/mingw64/include/QtWidgets"
            +" -I$MINGW_ROOT$/mingw64/include/QtGui"
            +" -I$MINGW_ROOT$/mingw64/include/QtNetwork"
            +" -I$MINGW_ROOT$/mingw64/include/QtCore"
            +" -I$MINGW_ROOT$/mingw64/include/c++/10.2.0"
            +" -I$MINGW_ROOT$/mingw64/include/c++/10.2.0/x86_64-w64-mingw32"
            +" -I$MINGW_ROOT$/mingw64/include/c++/10.2.0/backward"
            +" -I$MINGW_ROOT$/mingw64/lib/gcc/x86_64-w64-mingw32/10.2.0/include"
            +" -I$MINGW_ROOT$/mingw64/include"
            +" -I$MINGW_ROOT$/mingw64/lib/gcc/x86_64-w64-mingw32/10.2.0/include-fixed"
            +" -I$MINGW_ROOT$/mingw64/x86_64-w64-mingw32/include"
.HRDB_CFLAGS ="-fno-keep-inline-dllexport"
            +" -O2"
            +" -std=gnu++11"
            +" -Wall"
            +" -Wextra"
            +" -Wextra"
            +" -fexceptions"
            +" -mthreads"
            +" $MOC_DEFINES$"
.HRDB_PATHS  ="-I."
            +" -I$MINGW_ROOT$/mingw64/include/QtWidgets"
            +" -I$MINGW_ROOT$/mingw64/include/QtGui"
            +" -I$MINGW_ROOT$/mingw64/include/QtNetwork"
            +" -I$MINGW_ROOT$/mingw64/include/QtCore"
            +" -Ihrdb"
            +" -I/include"
            +" -I$MINGW_ROOT$/mingw64/share/qt5/mkspecs/win32-g++"

; moc.predefs is essentially compiling an empty source code with -E (and some other flags) so it'll produce
; a text file with #define stuff. However we tell fastbuild that the compiler we use is gcc then it does
; something and deletes the output file (probably has something to do with it actually running gcc -E internally
; to get dependencies and tripping itself somehow). So we instead say that the compiler is unknown so it
; doesn't get bright ideas.
Compiler( 'gpp-custom' )              ; Alias
{
  .Executable                   =.GPP     ; Primary compiler executable
  .CompilerFamily               ="custom" ; (optional) Explicitly specify compiler type (default: auto)
}
TextFile( "moc_predefs_cpp" )
{
    .TextFileOutput         ="moc_predefs.cpp" ; Output file to generate
    .TextFileInputStrings   ="// lol"          ; Array of non-empty strings to be written to the output file, one per line.
}
ObjectList( "hrdb_predefs" )         ; Alias
{
  .Compiler                 ="gpp-custom"      ; Compiler to use
  .CompilerOptions          ="-fno-keep-inline-dllexport -O2 -std=gnu++11 -Wall -Wextra -Wextra -dM -c -E %1 -o %2" ; Options for compiler
  .CompilerOutputPath       ="hrdb"            ; Path to store intermediate objects
  .CompilerInputFiles       ="moc_predefs.cpp" ; (optional) Explicit array of files to build
  .CompilerOutputExtension  =".h"              ; (optional) Specify the file extension for generated objects (default .obj or .o)
}

; Header files parsed by moc and produce .cpp files. Qt is weird...
.MOC_SRC=
{
    "$SRC_DIR$/tools/hrdb/mainwindow.h"
    "$SRC_DIR$/tools/hrdb/targetmodel.h"
    "$SRC_DIR$/tools/hrdb/disasmwidget.h"
    "$SRC_DIR$/tools/hrdb/memoryviewwidget.h"
    "$SRC_DIR$/tools/hrdb/graphicsinspector.h"
    "$SRC_DIR$/tools/hrdb/breakpointswidget.h"
}
Compiler( 'moc' )              ; Alias
{
  .Executable                   =.MOC     ; Primary compiler executable
  .CompilerFamily               ="custom" ; (optional) Explicitly specify compiler type (default: auto)
}
ObjectList( "hrdb_moc" )         ; Alias
{
  .Compiler                 ="moc"                                   ; Compiler to use
  .CompilerOptions          ="$MOC_DEFINES$ $MOC_INCLUDES$ %1 -o %2" ; Options for compiler
  .CompilerOutputPath       ="hrdb"                                  ; Path to store intermediate objects
  .CompilerInputFiles       =.MOC_SRC                                ; (optional) Explicit array of files to build
  .CompilerOutputExtension  =".cpp"                                  ; (optional) Specify the file extension for generated objects (default .obj or .o)
  .CompilerOutputPrefix     ="moc_"                                  ; (optional) Specify a prefix for generated objects (default none)
  .PreBuildDependencies    ="hrdb_predefs"
}

; Assets like pictures converted into .cpp files by qt's rcc
Compiler('rcc')
{
  .Executable                   =.RCC  ; Primary compiler executable
  .CompilerFamily               ="qt-rcc" ; (optional) Explicitly specify compiler type (default: auto)
}       
ObjectList( "hrdb_qrc" )         ; Alias
{
  .Compiler                 ="rcc"                           ; Compiler to use
  .CompilerOptions          ="-name hrdb %1 -o %2"           ; Options for compiler
  .CompilerOutputPath       ="hrdb"                          ; Path to store intermediate objects
  .CompilerInputFiles       ="$SRC_DIR$/tools/hrdb/hrdb.qrc" ; (optional) Explicit array of files to build
  .CompilerOutputExtension  =".cpp"                          ; (optional) Specify the file extension for generated objects (default .obj or .o)
  .CompilerOutputPrefix     ="qrc_"                          ; (optional) Specify a prefix for generated objects (default none)
}

; Finally, compile the actual and generated code
.HRDB_SRC=
{
    "$SRC_DIR$/tools/hrdb/addbreakpointdialog.cpp"
    "$SRC_DIR$/tools/hrdb/breakpointswidget.cpp"
    "$SRC_DIR$/tools/hrdb/disassembler.cpp"
    "$SRC_DIR$/tools/hrdb/dispatcher.cpp"
    "$SRC_DIR$/tools/hrdb/hopper/decode.cpp"
    "$SRC_DIR$/tools/hrdb/main.cpp"
    "$SRC_DIR$/tools/hrdb/mainwindow.cpp"
    "$SRC_DIR$/tools/hrdb/stringparsers.cpp"
    "$SRC_DIR$/tools/hrdb/targetmodel.cpp"
    "$SRC_DIR$/tools/hrdb/disasmwidget.cpp"
    "$SRC_DIR$/tools/hrdb/memory.cpp"
    "$SRC_DIR$/tools/hrdb/memoryviewwidget.cpp"
    "$SRC_DIR$/tools/hrdb/breakpoint.cpp"
    "$SRC_DIR$/tools/hrdb/stringsplitter.cpp"
    "$SRC_DIR$/tools/hrdb/symboltable.cpp"
    "$SRC_DIR$/tools/hrdb/symboltablemodel.cpp"
    "$SRC_DIR$/tools/hrdb/exceptionmask.cpp"
    "$SRC_DIR$/tools/hrdb/exceptiondialog.cpp"
    "$SRC_DIR$/tools/hrdb/graphicsinspector.cpp"
    "$SRC_DIR$/tools/hrdb/rundialog.cpp"
}
ObjectList( "hrdb_obj" )         ; Alias
{
  .Compiler                 ="gpp"                                    ; Compiler to use
  .CompilerOptions          ="$HRDB_CFLAGS$ $HRDB_PATHS$ -c %1 -o %2" ; Options for compiler
  .CompilerOutputPath       ="hrdb"                                   ; Path to store intermediate objects
  .CompilerInputFiles       =.HRDB_SRC                                ; (optional) Explicit array of files to build
  .CompilerInputObjectLists ={"hrdb_moc","hrdb_qrc"}                  ; (optional) ObjectList(s) whos output should be used as an input
}

Executable( "hrdb_exe" )        ; (optional) Alias
{
  .Linker                  =.GPP         ; Linker executable to use
  .LinkerOutput            ="hrdb.exe"   ; Output from linker
  .LinkerOptions           ="-Wl,--dynamicbase,--nxcompat,--no-seh -Wl,-s -Wl,-subsystem,windows -mthreads  -o %2 %1 $MINGW_ROOT$/mingw64/lib/libQt5Widgets.dll.a $MINGW_ROOT$/mingw64/lib/libQt5Gui.dll.a $MINGW_ROOT$/mingw64/lib/libQt5Network.dll.a $MINGW_ROOT$/mingw64/lib/libQt5Core.dll.a  -lglu32 -lopengl32 -lgdi32 -luser32 -lmingw32 $MINGW_ROOT$/mingw64/lib/libqtmain.a -lshell32 "; Options to pass to linker
  .Libraries               ={"hrdb_obj"} ; Libraries to link into executable
}

Alias( 'all' )
{
  .Targets = { "hatari_exe", "hrdb_exe" }
}

